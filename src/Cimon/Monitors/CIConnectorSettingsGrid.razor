@using Cimon.DB.Models
@using Cimon.Data.CIConnectors
@using Optional
@using System.Reactive.Linq

@inject BuildConfigService BuildConfigService;
@inject NotificationService NotificationService
@inherits DbContextComponent<Cimon.DB.Models.CIConnectorSetting>;
@if (_progress.HasValue) {
    if (_progress.Value.HasValue) {
        <RadzenProgressBar Value="@_progress.Value.ValueOr(0)"></RadzenProgressBar>
    } else {
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Click="@RefreshAvailableBuilds">Sync build configurations</RadzenButton>
        
        </RadzenStack>
        <RadzenLabel>Loaded build configurations: @_loadedConfigurationsCount.Value</RadzenLabel>
    }
}
<RadzenLabel>Settings</RadzenLabel>
<RadzenDataGrid @ref="Grid" AllowAlternatingRows="false" KeyProperty="Id"
                AllowFiltering="true" AllowPaging="true"
                PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Items" TItem="CIConnectorSetting"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow"
                Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="CIConnectorSetting" Property="Key" Title="Key" Width="120px">
            <Template Context="setting">
                @setting.Key
            </Template>
            <EditTemplate Context="setting">
                <RadzenTextBox @bind-Value="setting.Key" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CIConnectorSetting" Property="Value" Title="Value" Width="120px">
            <Template Context="setting">
                @setting.Value
            </Template>
            <EditTemplate Context="setting">
                <RadzenTextBox @bind-Value="setting.Value" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CIConnectorSetting" Context="team" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="setting">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(setting))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(setting))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="setting">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(setting))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(setting))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(setting))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private CIConnector _connector;
    private ReactiveValue<Option<int>> _progress;
    private ReactiveValue<int> _loadedConfigurationsCount; 

    [Parameter]
    public CIConnector Connector {
        get => _connector;
        set {
            var firstInit = _connector is null;
            _connector = value;
            if (!firstInit) {
                RefreshItems();
                StateHasChanged();
            }
        }
    }

    protected override void RefreshItems() {
        base.RefreshItems();
        var progress = BuildConfigService.GetRefreshProgress(Connector);
        _progress = Subscribe(progress);
        _loadedConfigurationsCount = Subscribe(BuildConfigService.BuildConfigs.Select(x => 
            x.Count(i => i.Connector.Id == Connector.Id)));
    }

    protected override IQueryable<CIConnectorSetting> GetItems() {
        return base.GetItems().Where(i => i.CIConnector.Id == Connector.Id);
    }

    private async Task RefreshAvailableBuilds() {
        StateHasChanged();
        try {
            await BuildConfigService.RefreshBuildConfigs(Connector);
        }  catch (Exception e) {
            NotificationService.Notify(new NotificationMessage() {
                Summary = e.Message,
                Detail = e.ToString(),
                CloseOnClick = false,
                Severity = NotificationSeverity.Error,
                Duration = 30000
            });
        }
        StateHasChanged();
    }

}
