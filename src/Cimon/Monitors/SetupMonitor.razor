@page "/setupMonitor/{monitorId?}"
@attribute [Authorize(Roles = "monitor-editor")]

@inject MonitorService MonitorService
@inject NavigationManager NavigationManager
@inject BuildConfigService BuildConfigService;
@using Cimon.Data.BuildInformation
@using Cimon.Data.Monitors
@using System.Collections.Immutable
@using System.Text.Json
@using Cimon.Contracts
@using Cimon.DB.Models
@inherits ReactiveComponent

<PageTitle>Setup monitor @MonitorId</PageTitle>
<RadzenCard Visible="_monitor.HasValue">
    <RadzenButton Text="Save" Icon="save" Click="Save"/>
    <RadzenCard class="rz-mb-4 rz-mt-4">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Title</RadzenText>
        <RadzenTextBox @bind-Value=@Monitor.Title class="w-100"/>
    </RadzenCard>
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" Text="Select builds to display"></RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            @foreach (var system in Enum.GetNames<CISystem>()) {
                <RadzenButton Text="@($"Refresh {system}")" Icon="refresh" Click="() => RefreshAvailableBuilds(Enum.Parse<CISystem>(system))"></RadzenButton>
            }
        </RadzenStack>
        <RadzenDataGrid @ref="grid" AllowRowSelectOnRowClick="@true" Render="@OnRender"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowColumnResize="true" AllowGrouping="true" AllGroupsExpanded="@true"
                        Data="@_buildConfigs.Value" TItem="BuildConfig" ColumnWidth="200px"
                        SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@_selectedLocators class="m-4">
            <Columns>
                <RadzenDataGridColumn TItem="BuildConfig" Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool" Value="@(_buildConfigs.Value?.Any(i => _selectedLocators?.Contains(i) ?? false) ?? false)"
                                        Change="@(OnSelectAllChanged)"/>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TriState="false" Value="@(_selectedLocators.Contains(data))"
                                        TValue="bool"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BuildConfig" Property="Id" Title="Id"/>
                <RadzenDataGridColumn TItem="BuildConfig" Property="CISystem" Title="CISystem"/>
                <RadzenDataGridColumn TItem="BuildConfig" Property="Key" Title="Key"/>
                <RadzenDataGridColumn TItem="BuildConfig" Property="Status" Title="Status"/>
                <RadzenDataGridColumn TItem="BuildConfig" Title="Props">
                    <Template Context="item">
                        <RadzenText>@JsonSerializer.Serialize(item.Props)</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        </RadzenCard>
</RadzenCard>

@code {

    private ReactiveValue<Monitor> _monitor = null!;
    private Monitor Monitor => _monitor.Value;
    RadzenDataGrid<BuildConfig> grid;
    private ReactiveValue<IImmutableList<BuildConfig>> _buildConfigs;
    IList<BuildConfig> _selectedLocators = new List<BuildConfig>();
    
    [Parameter]
    public string? MonitorId { get; set; }

    void OnRender(DataGridRenderEventArgs<BuildConfig> args) {
        if (!args.FirstRender)
            return;
        args.Grid.Groups.Add(new GroupDescriptor() {
            Property = nameof(BuildConfig.CISystem),
            SortOrder = SortOrder.Ascending
        });
        StateHasChanged();
    }

    private void SetSelectedLocators(IList<BuildConfig>? list) {
        _selectedLocators = list ?? ArraySegment<BuildConfig>.Empty;
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _buildConfigs = Subscribe(BuildConfigService.BuildConfigs);
        // todo combine build configs and monitor
        _monitor = Subscribe(MonitorService.GetMonitorById(MonitorId)).OnChange(monitor => {
            var descriptors = _buildConfigs.Value?.Where(l => monitor.Builds.Any(b => l.Key == b.Key)).ToList();
            SetSelectedLocators(descriptors);
        });
    }

    private async Task Save() {
        Monitor.Builds = _selectedLocators.OfType<BuildConfig>().ToList();
        await MonitorService.Save(Monitor);
        NavigationManager.NavigateTo("/monitorList");
    }

    private void OnSelectAllChanged(bool args) {
        SetSelectedLocators(args ? _buildConfigs.Value?.ToList() : null);
    }

    private async Task RefreshAvailableBuilds(CISystem ciSystem) {
        await BuildConfigService.RefreshBuildConfigs(ciSystem);
    }

}
