@page "/setupMonitor/{monitorId?}"
@attribute [Authorize(Policy = "EditMonitor")]

@inject MonitorService MonitorService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@using Cimon.Data.Monitors
@using Cimon.DB.Models
@using System.Text.Json
@inherits ReactiveComponent

<PageTitle>Setup monitor @MonitorId</PageTitle>
<RadzenCard Visible="_monitor.HasValue">
    <RadzenButton data-qa="close" Text="Close" Icon="close" Click="Close"/>
    <RadzenButton data-qa="save" Text="Save" Icon="save" Click="Save"/>
    <RadzenButton Text="Setup connectors" Click="@SetupCIConnectors" />
    <RadzenCard class="rz-mb-4 rz-mt-4" Style="max-width: 40em">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenFormField Text="Title" >
               <RadzenTextBox aria-label="edit-title" @bind-Value="@Monitor.Title" class="w-100"/>
            </RadzenFormField>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenLabel Text="Share with others:" />
                <RadzenSwitch @bind-Value="@Monitor.Shared" Attributes="@(new Dictionary<string, object>{{"aria-label","edit-share"}})"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    <RadzenButton data-qa="add-build-config" Text="Add" Icon="add" Click="Add"/>
    <RadzenButton data-qa="rm-build-config" Text="Remove" Icon="remove" Click="Remove"/>
</RadzenCard>
<RadzenDataGrid @ref="Grid" AllowRowSelectOnRowClick="@true"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterMode="FilterMode.SimpleWithMenu"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true" AllowColumnResize="true"
                PagerPosition="PagerPosition.Top" AllowPaging="true" PageSize="15"
                Data="@Builds" TItem="BuildInMonitor" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@_selectedBuilds" class="m-4">
    <Columns>
        <RadzenDataGridColumn TItem="BuildInMonitor" Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool" Change="@(OnSelectAllChanged)"/>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@(_selectedBuilds.Contains(data))"
                                TValue="bool"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.Connector.CISystem" Title="CI type" Width="150px" />
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.Connector.Key" Title="CI Key" Width="150px" />
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.Name" Title="Name"/>
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.Key" Title="Key"/>
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.IsDefaultBranch" Title="IsDefaultBranch" />
        <RadzenDataGridColumn TItem="BuildInMonitor" Property="BuildConfig.Status" Title="Status" Width="100px"/>
        <RadzenDataGridColumn TItem="BuildInMonitor" Title="Props">
            <Template Context="item">
                <RadzenText>@JsonSerializer.Serialize(item.BuildConfig.Props)</RadzenText>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code {

    private RadzenDataGrid<BuildInMonitor> Grid = null!;
    private ReactiveValue<MonitorModel> _monitor;
    private MonitorModel? Monitor => _monitor.Value;
    private IList<BuildInMonitor> Builds => _monitor.Value?.Builds ?? (IList<BuildInMonitor>)Array.Empty<BuildInMonitor>();
    private IList<BuildInMonitor> _selectedBuilds = new List<BuildInMonitor>();
    
    [Parameter]
    public string? MonitorId { get; set; }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        await MonitorService.Refresh();
        Subscribe(ref _monitor, MonitorService.GetMonitorById(MonitorId));
    }

    private async Task Remove() {
        await MonitorService.RemoveBuilds(Monitor!, _selectedBuilds.Select(x=>x.BuildConfigId));
    }

    private async Task Add() {
        var selected = await DialogService.OpenAsync<BuildConfigListDialog>("Add build configs",
            new Dictionary<string, object?> {
                { nameof(BuildConfigListDialog.SelectedBuildConfigIds), _monitor.Value?.Builds.Select(x => x.BuildConfigId) }
            },
            new DialogOptions {
                Width = "95%",
                Height = "90%",
                Resizable = true,
                Draggable = false
            });
        if (selected is IEnumerable<int>) {
            await MonitorService.AddBuilds(Monitor!, selected);
        }
    }

    private void Close() {
        NavigationManager.NavigateTo("/monitorList");
    }

    private async Task Save() {
        await MonitorService.Save(Monitor!);
    }

    private void SetupCIConnectors() {
        NavigationManager.NavigateTo("/SetupCIConnectors");
    }


    private void OnSelectAllChanged(bool select) {
        _selectedBuilds = select ? Builds.ToList() : Array.Empty<BuildInMonitor>();
    }

}
