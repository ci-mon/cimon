@page "/monitor/{monitorId?}"
@using System.Reactive.Linq
@using Cimon.Contracts.CI
@using Cimon.Data.Actors
@using Cimon.Data.BuildInformation
@using Cimon.Data.Monitors
@using Cimon.Data.Users
@using Cimon.DB.Models
@using MediatR
@inject MonitorService MonitorService
@inject BuildInfoService BuildInfoService
@inject NavigationManager NavigationManager
@inherits ReactiveComponent
@inject IMediator Mediator

<PageTitle>CI @GetTitle()</PageTitle>
<div class="monitor">
    @if (_errorMessage != null) {
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H1">@_errorMessage</RadzenText>
        </RadzenRow>
    } else if (_monitor?.HasValue is true) {
        @foreach (var build in _monitor.Value.Builds.OrderBy(x=>x.BuildConfig.Key)) {
            <BuildInfoComponent BuildConfig="@build.BuildConfig" 
                                Info="@build.BuildInfo" />
        }
    }
</div>
@code {

    [Parameter]
    public string? MonitorId { get; set; }

    private ReactiveValue<IList<BuildInfo>> _buildInfos = null!;
    private ReactiveValue<MonitorModel>? _monitorOld;
    private ReactiveValue<MonitorData>? _monitor;

    private string GetTitle() => _monitorOld?.Value?.Title ?? MonitorId ?? string.Empty;
    private string? _errorMessage = "Monitor not found";

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        if (!string.IsNullOrWhiteSpace(MonitorId)) {
            await Mediator.Publish(new MonitorOpenedNotification(MonitorId));
        } else {
            MonitorId = await Mediator.Send<string?>(new GetDefaultMonitorRequest());
            if (!string.IsNullOrWhiteSpace(MonitorId)) {
                NavigationManager.NavigateTo($"monitor/{MonitorId}", new NavigationOptions() {
                    ReplaceHistoryEntry = true
                });
            }
        }
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        var subj = await AppActors.Instance.MonitorService.Ask(new ActorsApi.WatchMonitor(MonitorId));
        _monitor = Subscribe(subj).OnChange(info => {
            if (!info.Builds.Any()) {
                _errorMessage = "No build set up";
            } else if (info.Monitor.Removed) {
                _errorMessage = "Monitor removed";
            } else {
                _errorMessage = null;
            }
        });
        //_buildInfos = Subscribe(BuildInfoService.Watch(_monitorOld.Source.Select(m => m.Builds.Select(x => x.BuildConfig).ToList())));
        //await _buildInfos.WaitForValueAsync();
    }

}
