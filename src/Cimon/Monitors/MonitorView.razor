@page "/monitor/{monitorId?}"
@using Cimon.Data
@using System.Reactive.Linq
@using Cimon.Contracts
@using Cimon.Data.BuildInformation
@inject MonitorService MonitorService
@inject BuildInfoService BuildInfoService
@inherits ReactiveComponent

<PageTitle>CI @GetTitle()</PageTitle>
<div class="monitor">
    @if (_errorMessage != null) {
         <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H1">@_errorMessage</RadzenText>
        </RadzenRow>
    } else if (_buildInfos != null) {
        @foreach (var buildInfo in _buildInfos) {
            <BuildInfoComponent Info="@buildInfo"></BuildInfoComponent>
        }
    }
</div>
<style>
    .monitor{
        background-color: var(--rz-base-800);
        font-size: xx-small;
        height: 100%;
        display: grid;
        align-content: stretch;
        justify-items: stretch;
        align-items: stretch;
        grid-template-columns: auto;
    }
    .monitor h1 {
        color: var(--rz-danger);
    }

 .build-info-item {
        background: rgb(76,116,34);
        background: linear-gradient(1deg, rgba(76,116,34,1) 0%, rgba(131,190,64,1) 100%);
        padding: 0.5em;
        margin: 0.1em;
        container-type: size;
    }
    .build-info-item .committer p {
        font-size: clamp(5px, 12cqmin, 15px);
    }
    .build-info-item h5 {
        font-size: clamp(8px, 15cqmin, 20px);
    }
    .build-info-item h4 {
        font-size: clamp(12px, 30cqmin, 30px);
    }
     @@media only screen and (min-width: 700px) {
        .monitor {
             grid-template-columns: auto auto;
         }
        .build-info-item .committer p {
            font-size: clamp(5px, 8cqmin, 15px);
        }
        .build-info-item h5 {
            font-size: clamp(5px, 17cqmin, 20px);
        }
        .build-info-item h4 {
             font-size: clamp(10px, 22cqmin, 30px);
        }   
     }
    .build-info-item.failed {
        background: rgb(76,116,34);
        background: linear-gradient(1deg, rgb(116, 34, 34) 0%,  rgb(190, 64, 64) 100%);
    }
</style>
@code {

    [Parameter]
    public string? MonitorId { get; set; }

    private readonly IList<BuildInfo>? _buildInfos = new List<BuildInfo>();
    private Monitor? _monitor;

    private string GetTitle() => _monitor?.Title ?? MonitorId ?? string.Empty;
    private string? _errorMessage = "Monitor not fount";

    protected override void OnInitialized() {
        MonitorId ??= "default";
        BuildInfoService.Watch(
            MonitorService.GetMonitorById(MonitorId)
                .Subscribe(this, () => _monitor, monitor => {
                    if (!monitor.Builds.Any()) {
                        _errorMessage = "No build set up";
                    } else if (monitor.Removed) {
                        _errorMessage = "Monitor removed";
                    } else {
                        _errorMessage = null;
                    }
                })
                .Select(m => m.Builds))
            .Subscribe(this, () => _buildInfos);
    }

}
