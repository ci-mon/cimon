@using Cimon.Data.Monitors
@using Cimon.Data.Users
@using MediatR
@using Cimon.Data.Common
@using System.Reactive.Linq
@using System.Text
@using Akka.Actor
@using Cimon.Contracts.CI
@using System.Collections.Immutable
@using Akka.Hosting
@using Cimon.DB.Models
@inject NavigationManager NavigationManager
@inherits ReactiveComponent
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUserAccessor
@inject IJSRuntime JsRuntime;
@inject NotificationService NotificationService
@inject IRequiredActor<UserSupervisorActor> UserSupervisorActor;
@inject IRequiredActor<MonitorServiceActor> MonitorServiceActor;

@if (Visible) {
    <PageTitle>CI @GetTitle()</PageTitle>
    <SectionContent SectionName="right-toolbar">
        @if (Visible) {
            <AuthorizeView>
                <RadzenButton Icon="sync" Click="() => RefreshMonitor()"/>
            </AuthorizeView>
        }
       <AuthorizeView Policy="EditMonitor" Resource="MonitorData">
           <RadzenToggleButton class="ml-2" Icon="tune" Click="() => _editMode = !_editMode"/>
       </AuthorizeView>
    </SectionContent>
    @if (_editMode) {
        <RadzenCard class="rz-p-2 monitor-settings-panel">
            <RadzenLabel>Columns count</RadzenLabel>
            <RadzenRadioButtonList @bind-Value=@_columnsCount TValue="int" Change="OnColumnCountChange" class="">
                <Items>
                    <RadzenRadioButtonListItem Text="Auto" Value="0"/>
                    <RadzenRadioButtonListItem Text="2" Value="2"/>
                    <RadzenRadioButtonListItem Text="3" Value="3"/>
                    <RadzenRadioButtonListItem Text="4" Value="4"/>
                    <RadzenRadioButtonListItem Text="5" Value="5"/>
                </Items>
            </RadzenRadioButtonList>
        </RadzenCard>
    }
    <div class="monitor monitor-columns-@_columnsCount">
        @if (_errorMessage != null) {
            <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                <RadzenText TextStyle="TextStyle.H1">@_errorMessage</RadzenText>
            </RadzenRow>
        } else if (_activeUsers is {}) {
            var items = MonitorData.Builds
                .OrderBy(x => MonitorData.Monitor.ViewSettings?.BuildPositions.IndexOf(x.BuildConfig.Id))
                .ToList();
            @foreach (var build in items) {
                <BuildInfoComponent BuildConfig="@build.BuildConfig"
                                    Info="@build.BuildInfo"
                                    ActiveUsers="@_activeUsers"
                                    AllowReorder="@_editMode"
                                    MaxCommitters="5"
                                    OnDragStart="e => OnDragStart(e, build)"
                                    OnDrop="e => OnDrop(build)"/>
            }
        }
    </div>
}
@code {

    protected override bool PreloadData => true;

    [Parameter] public MonitorData MonitorData { get; set; }
    [Parameter] public bool Visible { get; set; } = true;
   
    private ReactiveValue<IList<BuildInfo>> _buildInfos;
    private string? _errorMessage;
    private IObservable<IImmutableSet<string>>? _activeUsers;
    private bool _editMode;
    private int _columnsCount;
    private string MonitorKey => MonitorData.Monitor.Key;

    private string GetTitle() {
        var result = new StringBuilder();
        if (MonitorData.Monitor.Title is { } title) {
            result.Append(title);
        }
        if (_buildInfos.Value is { } infos) {
            var failed = infos.Count(x => x.IsNotOk());
            if (failed == 0) {
                result.Append(" - all good");
            }
            else {
                result.Append($" - {failed} of {infos.Count} builds failed");
            }
        }

        return result.ToString();
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
       _activeUsers = await UserSupervisorActor.ActorRef.Ask(new ActorsApi.GetActiveUserNames());
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        _columnsCount = MonitorData.Monitor.ViewSettings?.ColumnsCount ?? 0;
        if (!MonitorData.Builds.Any()) {
            _errorMessage = "No build set up";
        }
        else if (MonitorData.Monitor.Removed) {
            _errorMessage = "Monitor removed";
        }
        else {
            _errorMessage = null;
        }
        Subscribe(ref _buildInfos, MonitorData.Builds.Select(x => x.BuildInfo).Zip()).OnChange(list => {
            var isSomeFailed = list.Any(x => x.IsNotOk());
            JsRuntime.InvokeVoidAsync("uiApi.setIcon", isSomeFailed ? "red" : "green");
        });
    }

    private void RefreshMonitor() {
        MonitorServiceActor.ActorRef.Tell(new ActorsApi.RefreshMonitor(MonitorKey));
        NotificationService.Notify(new NotificationMessage() {
            Summary = "Data refresh started",
            Severity = NotificationSeverity.Success
        });
    }

    private IBuildInfoStream? _draggedItem;

    private void OnDragStart(DragEventArgs e, IBuildInfoStream item) {
        _draggedItem = item;
        e.DataTransfer.EffectAllowed = "move";
    }

    private void OnDrop(IBuildInfoStream targetItem) {
        var target = _draggedItem?.BuildConfig;
        if (targetItem == _draggedItem || target is null) {
            _draggedItem = null;
            return;
        }
        var placeBefore = targetItem.BuildConfig;
        MonitorServiceActor.ActorRef.Tell(new ActorsApi.ReorderMonitorItems(MonitorKey!, target, placeBefore));
        _draggedItem = null;
    }

    private void OnColumnCountChange(int newCount) {
        ViewSettings settings = MonitorData.Monitor.ViewSettings ?? new ViewSettings();
        MonitorServiceActor.ActorRef.Tell(new ActorsApi.UpdateViewSettings(MonitorKey!, settings with { ColumnsCount = newCount }));
    }

}
