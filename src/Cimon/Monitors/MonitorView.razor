@page "/monitor/{monitorId?}"
@using System.Reactive.Linq
@using Cimon.Contracts
@using Cimon.Contracts.CI
@using Cimon.Data.BuildInformation
@using Cimon.Data.Users
@using Cimon.DB.Models
@using MediatR
@inject MonitorService MonitorService
@inject BuildInfoService BuildInfoService
@inject NavigationManager NavigationManager
@inherits ReactiveComponent
@inject IMediator Mediator

<PageTitle>CI @GetTitle()</PageTitle>
<div class="monitor">
    @if (_errorMessage != null) {
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H1">@_errorMessage</RadzenText>
        </RadzenRow>
    } else if (_buildInfos?.HasValue is true) {
        @foreach (var buildInfo in _buildInfos.Value.OrderBy(x => x.Group)) {
            <BuildInfoComponent Info="@buildInfo"></BuildInfoComponent>
        }
    }
</div>
<style>
    .monitor{
        background-color: var(--rz-base-800);
        font-size: small;
        height: 100%;
        display: grid;
        align-content: stretch;
        justify-items: stretch;
        align-items: stretch;
        grid-template-columns: auto;
    }
    .monitor h1 {
        color: var(--rz-danger);
    }

    .build-info-item {
        background: rgb(76,116,34);
        background: linear-gradient(1deg, rgba(76,116,34,1) 0%, rgba(131,190,64,1) 100%);
        padding: 0.5em;
        margin: 0.1em;
        container-type: size;
    }
    .build-info-item .committer p {
        font-size: clamp(5px, 12cqmin, 15px);
    }
    .build-info-item h5 {
        font-size: clamp(8px, 15cqmin, 20px);
    }
    .build-info-item h4 {
        font-size: clamp(12px, 30cqmin, 30px);
    }
     @@media only screen and (min-width: 700px) {
        .monitor {
             grid-template-columns: auto auto;
         }
        .build-info-item .committer .commits-count {
            font-size: clamp(10px, 8cqmin, 15px);
        }
        .build-info-item .committer p {
            font-size: clamp(8px, 8cqmin, 15px);
        }
        .build-info-item {
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .build-info-item h5 {
            font-size: clamp(5px, 17cqmin, 20px);
            max-width: 420px;
        }
        .build-info-item h4 {
             font-size: clamp(10px, 22cqmin, 30px);
        }   
     }
    .build-info-item.failed {
        background: rgb(76,116,34);
        background: linear-gradient(1deg, rgb(116, 34, 34) 0%,  rgb(190, 64, 64) 100%);
    }
</style>

@code {

    [Parameter]
    public string? MonitorId { get; set; }

    private ReactiveValue<IList<BuildInfo>> _buildInfos = null!;
    private ReactiveValue<Monitor>? _monitor;

    private string GetTitle() => _monitor?.Value?.Title ?? MonitorId ?? string.Empty;
    private string? _errorMessage = "Monitor not found";

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        if (!string.IsNullOrWhiteSpace(MonitorId)) {
            await Mediator.Publish(new MonitorOpenedNotification(MonitorId));
        } else {
            MonitorId = await Mediator.Send<string?>(new GetDefaultMonitorRequest());
            if (!string.IsNullOrWhiteSpace(MonitorId)) {
                NavigationManager.NavigateTo($"monitor/{MonitorId}", new NavigationOptions() {
                    ReplaceHistoryEntry = true
                });
            }
        }
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        _monitor = Subscribe(MonitorService.GetMonitorById(MonitorId)).OnChange(monitor => {
            if (!monitor.Builds.Any()) {
                _errorMessage = "No build set up";
            } else if (monitor.Removed) {
                _errorMessage = "Monitor removed";
            } else {
                _errorMessage = null;
            }
        });
        _buildInfos = Subscribe(BuildInfoService.Watch(_monitor.Source.Select(m => m.Builds.Select(x => x.BuildConfig).ToList())));
        await _buildInfos.WaitForValueAsync();
    }

}
