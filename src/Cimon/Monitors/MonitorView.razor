@page "/monitor/{monitorId?}"
@using Cimon.Data.Monitors
@using Cimon.Data.Users
@using MediatR
@using Cimon.Data.Common
@using System.Reactive.Linq
@using System.Text
@using Cimon.Contracts.CI
@inject NavigationManager NavigationManager
@inherits ReactiveComponent
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUserAccessor
@inject IJSRuntime JSRuntime;

<PageTitle>CI @GetTitle()</PageTitle>
<div class="monitor">
    @if (_errorMessage != null) {
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H1">@_errorMessage</RadzenText>
        </RadzenRow>
    } else if (_monitor.HasValue) {
        @foreach (var build in _monitor.Value.Builds.OrderBy(x=>x.BuildConfig.Connector.CISystem)) {
            <BuildInfoComponent BuildConfig="@build.BuildConfig" 
                                Info="@build.BuildInfo"
                                MaxCommitters="5"/>
        }
    }
</div>
@code {

    protected override bool PreloadData => true;

    [Parameter]
    public string? MonitorId { get; set; }
    private ReactiveValue<MonitorData> _monitor;
    private ReactiveValue<IList<BuildInfo>> _buildInfos;

    private string GetTitle() {
        var result = new StringBuilder();
        if ((_monitor.Value?.Monitor.Title ?? MonitorId) is { } title) {
            result.Append(title);
        }
        if (_buildInfos.Value is {} infos) {
            var failed = infos.Count(x => x.IsNotOk());
            if (failed == 0) {
                result.Append(" - all good");
            } else {
                result.Append($" - {failed} of {infos.Count} builds failed");
            }
        }
        return result.ToString();
    }

    private string? _errorMessage;

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        var user = await CurrentUserAccessor.Current;
        if (!string.IsNullOrWhiteSpace(MonitorId)) {
            await Mediator.Publish(new MonitorOpenedNotification(user, MonitorId));
            NavigationManager.RegisterLocationChangingHandler(async context => {
                await JSRuntime.InvokeVoidAsync("uiApi.resetIcon");
            });
        } else {
            MonitorId = await Mediator.Send<string?>(new GetDefaultMonitorRequest(user));
            if (!string.IsNullOrWhiteSpace(MonitorId)) {
                NavigationManager.NavigateTo($"monitor/{MonitorId}", new NavigationOptions {
                    ReplaceHistoryEntry = true
                });
            }
        }
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        var subj = await AppActors.Instance.MonitorService.Ask(new ActorsApi.WatchMonitor(MonitorId!));
        Subscribe(ref _monitor, subj).OnChange(info => {
            if (!info.Builds.Any()) {
                _errorMessage = "No build set up";
            } else if (info.Monitor.Removed) {
                _errorMessage = "Monitor removed";
            } else {
                _errorMessage = null;
            }
            Subscribe(ref _buildInfos, info.Builds.Select(x => x.BuildInfo).Zip()).OnChange(list => {
                var isSomeFailed = list.Any(x => x.IsNotOk());
                JSRuntime.InvokeVoidAsync("uiApi.setIcon", isSomeFailed ? "red" : "green");
            });
        });
        if (!_monitor.HasValue) {
            _errorMessage = "Loading...";
        }
    }

}
