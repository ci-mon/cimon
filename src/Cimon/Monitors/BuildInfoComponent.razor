@using Cimon.Data
@using Microsoft.AspNetCore.Components
@using System.Text.Encodings.Web
@using AngleSharp.Text
@using Cimon.Contracts
@using Cimon.Contracts.CI
@using Cimon.Data.BuildInformation
@using Cimon.Data.Common
@using Microsoft.Extensions.Options
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService

<div class="build-info-item @GetClasses()">
    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5em">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Visible="@Info.IsNotOk()" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Variant="Variant.Text" Click="Discuss">
                <RadzenIcon Icon="chat" Style="color: var(--rz-white)"/>
                <RadzenBadge BadgeStyle="BadgeStyle.Warning" IsPill="@true" Text="@Info.CommentsCount.ToString()" class="rz-ml-2"/>
            </RadzenButton>
            <RadzenLink Path="@Info.Url" Target="blank">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: white">
                        @Info.Name @(string.IsNullOrWhiteSpace(Info.Number) ? string.Empty : Info.Number)
                    </RadzenText>
                </RadzenStack>
            </RadzenLink>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenText Visible="@(Info.Status != BuildStatus.Failed)" TextStyle="TextStyle.H6" Style="color: white">
                 @GetDuration()
                 @Info.StartDate?.ToString("HH:mm")
                 @if (Info.EndDate.HasValue) {
                     <p>-</p>
                     @Info.EndDate?.ToString("HH:mm")
                 }
             </RadzenText>
            @if (!string.IsNullOrWhiteSpace(Info.StatusText)) {
                <RadzenText TextStyle="TextStyle.H6" Style="color: white">|</RadzenText>
                <RadzenText MouseEnter="@(ShowStatusTooltip)" TextStyle="TextStyle.H6" Style="color: white" Text="@Info.StatusText.Strip(70)"></RadzenText>
            }
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal">
        @if (Info.Status == BuildStatus.Failed) {
            foreach (var committer in GetCommitters()) {
                var user = committer.User;

                <RadzenStack class="committer"
                             Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right"
                             AlignItems="AlignItems.Center" Gap="0">
                    <div class="avatar">
                        <p class="commits-count" title="Commits count">@committer.CommitsCount</p>
                        @if (Info.FailureSuspect?.User == user) {
                            <p class="failure-author-confidence" title="Confidence">@Info.FailureSuspect.Confidence %</p>
                        }
                        <RadzenGravatar Email="@user.Email?.ToLowerInvariant()">@user.Name</RadzenGravatar>
                    </div>
                    <RadzenText Text="@user.Name" Style="color: white"></RadzenText>
                </RadzenStack>
            }
        }
    </RadzenStack>
    
</div>
<style>
.avatar {
position: relative;
}
    .commits-count{
       color: white;
       position: absolute;
       right: -4px;
       background-color: #e66060;
       border-radius: 2px;
    }
    .failure-author-confidence{
       color: white;
       position: absolute;
       right: -4px;
       background-color: #a8005f;
       border-radius: 2px;
    }
    .status-tooltip{
        max-width: 400px;
        text-wrap: balance;
        line-break: anywhere;
    }
</style>

@code {

    record CommitterInfo(VcsUser User, int CommitsCount);

    [Parameter]
    public BuildInfo Info { get; set; } = null!;

    private string GetClasses() => Info.Status == BuildStatus.Failed ? "failed" : "";

    private void Discuss() {
        NavigationManager.NavigateTo($"/buildDiscussion/{Info.BuildConfigId}");
    }

    void ShowStatusTooltip(ElementReference elementReference) {
        var options = new TooltipOptions {
            Duration = 50000
        };
        TooltipService.Open(elementReference, _ => @<div class="status-tooltip">@Info.StatusText</div>, options);
    }

    private string GetDuration() {
        string duration = TimeSpan.FromSeconds(Math.Round(Info.Duration?.TotalSeconds ?? 0)).ToString("g");
        if (duration.StartsWith("0:")) {
            duration = duration.Substring(2);
        }
        return $"[{duration}]";
    }

    private IReadOnlyCollection<CommitterInfo> GetCommitters() {
        return Info?.Changes.GroupBy(x => x.Author)
            .OrderByDescending(x => x.Count())
            .Take(5)
            .Select(x => new CommitterInfo(x.Key, x.Count())).ToList()
               ?? (IReadOnlyCollection<CommitterInfo>)Array.Empty<CommitterInfo>();
    }

}