@using Cimon.Data
@using Microsoft.AspNetCore.Components
@using System.Text.Encodings.Web
@using AngleSharp.Text
@using Cimon.Contracts
@inject NavigationManager NavigationManager

<div class="build-info-item @GetClasses()">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5em">
            <RadzenLink Path="@Info.Url">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: white">
                        @Info.Name # @Info.Number
                    </RadzenText>
                </RadzenStack>
            </RadzenLink>
            <RadzenStack Orientation="Orientation.Horizontal">
                @if (!string.IsNullOrWhiteSpace(Info.StatusText)) {
                    <RadzenText TextStyle="TextStyle.H5" Style="color: white" Text="@Info.StatusText"></RadzenText>
                }
            <RadzenButton Visible="@Info.IsNotOk()" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Variant="Variant.Text" Click="Discuss">
                                    <RadzenIcon Icon="chat" Style="color: var(--rz-white)"/>
                                    <RadzenBadge BadgeStyle="BadgeStyle.Warning" IsPill="@true" Text="@Info.CommentsCount.ToString()" class="rz-ml-2"/>
                                </RadzenButton>
            </RadzenStack>
            
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenText TextStyle="TextStyle.H5" Style="color: white" Text="@Info.StartDate.ToString("HH:mm")"></RadzenText>
            <RadzenText TextStyle="TextStyle.H5" Style="color: white" Text="-"></RadzenText>
            <RadzenText TextStyle="TextStyle.H5" Style="color: white" Text="@Info.EndDate.ToString("HH:mm")"></RadzenText>
            <RadzenText TextStyle="TextStyle.H5" Style="color: white" Text="@GetDuration()"></RadzenText>
        </RadzenStack>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal">
            @if (Info.Status == BuildStatus.Failed) {
                foreach (var user in Info.CommitterUsers) {
                    <RadzenStack class="committer"
                                 Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right"
                                 AlignItems="AlignItems.Center" Gap="0">
                        <RadzenGravatar Email="@user.Email">@user.Name</RadzenGravatar>
                        <RadzenText Text="@user.Name" Style="color: white"></RadzenText>
                    </RadzenStack>
                }
            }
        </RadzenStack>
    </RadzenStack>
</div>

@code {

    [Parameter]
    public BuildInfo Info { get; set; } = null!;
    private string GetClasses() => Info.Status == BuildStatus.Failed ? "failed" : "";

    private void Discuss() {
        NavigationManager.NavigateTo($"/buildDiscussion/{Info.BuildConfigId}");
    }

    private string GetDuration() {
        string duration = TimeSpan.FromSeconds(Math.Round(Info.Duration.TotalSeconds)).ToString("g");
        if (duration.StartsWith("0:")) {
            duration = duration.Substring(2);
        }
        return $"({duration})";
    }

}