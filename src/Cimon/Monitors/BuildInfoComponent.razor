@using Cimon.Contracts.CI
@using Cimon.Data.Common
@using Cimon.Users
@using System.Text
@using System.Runtime.CompilerServices
@using System.Collections.Immutable
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService
@inject AppInitialStateAccessor AppInitialStateAccessor
@inherits DraggableItem

<div class="build-info-item @GetClasses()" draggable="@AllowReorder.ToString()"
     @attributes="AdditionalAttributes"
     @ondragstart="OnDragStart"
     @ondrop="OnDrop"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave">
    @if (AllowReorder) {
        <div class="drop-zone" ondragover="event.preventDefault()"></div>
    }
    <div class="content">
        <RadzenProgressBar Visible="@(BuildInfo is null)"
                           ProgressBarStyle="ProgressBarStyle.Light"
                           Value="100" ShowValue="false"
                           Mode="ProgressBarMode.Indeterminate"/>
        <RadzenStack Orientation="Orientation.Vertical" Gap="2px" class="build-name-and-status">
            <RadzenStack Orientation="Orientation.Horizontal" class="build-name">
                <RadzenText TextStyle="TextStyle.H4" class="build-name-text">
                    @if (BuildInfo is not null) {
                        <RadzenLink Path="@BuildInfo.Url" Target="blank" class="build-info-link" Title="Open in CI system">
                            <span data-qa="build-info-name">@BuildInfo.Name @(string.IsNullOrWhiteSpace(BuildInfo.Number) ? string.Empty : BuildInfo.Number)</span>
                            <RadzenIcon Icon="open_in_new"/>
                        </RadzenLink>
                    }
                    else {
                        <RadzenText TextStyle="TextStyle.H5" class="build-info-link">
                            @BuildConfig.Key
                        </RadzenText>
                    }
                </RadzenText>
                 @if (BuildInfo is not null) {
                    <RadzenButton Title="Open discussion" class="discussion-button" Visible="@BuildInfo.IsNotOk()" Size="ButtonSize.Small" Variant="Variant.Text" Click="Discuss">
                        <RadzenBadge BadgeStyle="BadgeStyle.Warning" IsPill="@true" class="rz-ml-2">
                            <RadzenIcon Icon="chat" Style="color: var(--rz-white);margin-top: 3px;"/>
                            @BuildInfo.CommentsCount.ToString()
                        </RadzenBadge>
                    </RadzenButton>
                }
            </RadzenStack>

            <RadzenText @ref="@infoText" Visible="@(BuildInfo is not null)" TextStyle="TextStyle.H5" onclick="@(() => ShowStatusTooltip(infoText.Element))" class="build-status">
                @{
                    var durationInfo = GetDurationInfo();
                }
                <span title="@durationInfo.Full">@durationInfo.Start</span>
                <span> | </span>
                <span title="@durationInfo.Full">@durationInfo.Duration</span>
                <span> | </span>
                <span class="status-text">@GetStatusInfo()</span>
            </RadzenText>
        </RadzenStack>

        @if (BuildInfo?.Status == BuildStatus.Failed) {
            <div class="avatar-group">
                <RadzenStack Orientation="Orientation.Horizontal"
                             AlignItems="AlignItems.Normal" Gap="8px">
                    @foreach (var committer in Committers) {
                        var user = committer.User;
                        var confidence = committer.SuspectConfidence;
                        var isSuspect = confidence >= 10;
                        var committerClasses = isSuspect ? " suspect" : string.Empty;
                        var userName = GetUserName(user);
                        <RadzenStack class="committer-wrap" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right"
                                     AlignItems="AlignItems.Center" Gap="2px">
                            <div title="@user.FullName" class="avatar committer @committerClasses">
                                <CimonAvatar UserName="@userName" Email="@user.Email?.ToLowerInvariant()"></CimonAvatar>
                                <div class="commits-count">
                                    <p title="Commits count: @committer.CommitsCount">@committer.CommitsCount</p>
                                    @if (isSuspect) {
                                        var opacity = 30 + Math.Floor(Math.Min(100, 70 * confidence / 100f));
                                        <div style="opacity: @opacity%" title="Suspected in build failure with @confidence% confidence">
                                            <RadzenIcon Icon="local_fire_department"/>
                                        </div>
                                    }
                                </div>
                                @if (_activeUsers.HasValue && _activeUsers.Value.Contains(user.Name)) {
                                    <div class="active-user"></div>
                                }
                            </div>
                            <RadzenText Text="@GetUserName(user)" title="@GetUserName(user)" class="user-name"></RadzenText>
                        </RadzenStack>
                    }
                </RadzenStack>
            </div>
        }
    </div>
</div>

@code {
    RadzenText infoText;
    private ReactiveValue<BuildInfo> _infoSubscription;
    private BuildInfo? BuildInfo => _infoSubscription.Value;
    private IReadOnlyCollection<CommitterInfo> Committers { get; set; } = ArraySegment<CommitterInfo>.Empty;
    private AppClientType AppClientType { get; set; }
    private ReactiveValue<IImmutableSet<string>> _activeUsers;

    [Parameter] public BuildConfig BuildConfig { get; set; } = null!;
    [Parameter] public IObservable<BuildInfo> Info { get; set; } = null!;
    [Parameter] public IObservable<IImmutableSet<string>> ActiveUsers { get; set; } = null!;

    [Parameter] public int? MaxCommitters { get; set; }

    [Parameter] public bool AllowReorder { get; set; }

    protected override bool PreloadData => true;

    protected override async Task OnInitializedAsync() {
        AppClientType = AppInitialStateAccessor.State.ClientType;
        await base.OnInitializedAsync();
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        Subscribe(ref _activeUsers, ActiveUsers);
        Subscribe(ref _infoSubscription, Info).OnChange(value => {
            var committers = value.CombinedCommitters;
            if (MaxCommitters.HasValue && committers.Count > MaxCommitters.Value) {
                committers = committers.Take(MaxCommitters.Value).ToList();
            }
            Committers = committers;
        });
    }

    private string GetClasses() {
        var builder = new DefaultInterpolatedStringHandler();
        if (BuildInfo is null) {
            builder.AppendLiteral(" loading");
        }
        else if (BuildInfo?.Status == BuildStatus.Failed) {
            builder.AppendLiteral(" failed");
            if (Committers.Any()) {
                builder.AppendLiteral(" with-committers");
            }
        }

        return builder.ToStringAndClear();
    }

    private void Discuss() {
        var isElectron = AppClientType == AppClientType.Electron;
        NavigationManager.NavigateTo($"/buildDiscussion/{BuildConfig.Id}", isElectron, isElectron);
    }

    void ShowStatusTooltip(ElementReference elementReference) {
        var options = new TooltipOptions {
            Duration = 50000,
        };
        TooltipService.Open(elementReference, _ => @<div class="status-tooltip">@BuildInfo.StatusText</div>, options);
    }

    private string GetDuration() {
        string duration = TimeSpan.FromSeconds(Math.Round(BuildInfo.Duration?.TotalSeconds ?? 0)).ToString("g");
        if (duration.StartsWith("0:")) {
            duration = duration.Substring(2);
        }

        return $"{duration}";
    }


    private string GetStatusInfo() {
        return !string.IsNullOrWhiteSpace(BuildInfo.StatusText) ? $"{BuildInfo.StatusText.Strip(70)}" : string.Empty;
    }

    private (string Start, string Duration, string Full) GetDurationInfo() {
        var result = new StringBuilder();
        var startDate = BuildInfo?.StartDate?.ToString("HH:mm") ?? "?";
        result.Append("Started at ");
        result.Append(startDate);
        result.Append(" completed at ");
        result.Append(BuildInfo?.EndDate?.ToString("HH:mm") ?? "?");
        result.Append(" | ");
        var duration = GetDuration();
        result.Append("Duration: ");
        result.Append(duration);
        return (startDate, duration, result.ToString());
    }

    private static string GetUserName(VcsUser user) {
        string? name = user.Name;
        return string.IsNullOrWhiteSpace(name) ? "<anonymous>" : name;
    }

}
