@page "/monitorList"
@using Cimon.Data.Monitors
@using Cimon.Data.Users
@using Cimon.DB.Models

@using Microsoft.AspNetCore.Http.Extensions
@using User = Cimon.Contracts.User
@inject ICurrentUserAccessor CurrentUserAccessor 
@inject MonitorService MonitorService
@inject NavigationManager NavigationManager

@inherits ReactiveComponent
<SectionContent SectionName="body-content">
    <RadzenStack class="bottom-panel" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.End">
        <AuthorizeView>
            <RadzenButton aria-label="add-group" Click="AddGroup" Icon="folder" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>
            <RadzenButton aria-label="add-monitor" Click="Add" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-8"/>
        </AuthorizeView>
    </RadzenStack>
</SectionContent>
<div>
    <RadzenPager class="monitor-pager" HorizontalAlign="HorizontalAlign.Center" Count="@_count" PageSize="@_pageSize" PageNumbersCount="5" PageChanged="@PageChanged"/>
    <RadzenCard class="rz-mt-4 main-panel">
        <RadzenDataList PageSize="16" WrapItems="true" AllowPaging="false"
                        Data="_items" TItem="MonitorModel">
            <Template Context="monitor">
                <RadzenCard class="monitor-item">
                    <RadzenRow>
                        <RadzenColumn>
                            @if (monitor.Type == MonitorType.Simple) {
                                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text=@(monitor.Builds.Count.ToString())/>
                            } else {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Info" Text=@(monitor.ConnectedMonitors.Count.ToString())/>
                            }
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenRow class="item-actions" JustifyContent="JustifyContent.End">
                                <AuthorizeView Policy="EditMonitor" Resource="monitor">
                                    <RadzenButton data-qa="setup" Variant="Variant.Text" Icon="settings" Click="() => SetupMonitor(monitor)"/>
                                </AuthorizeView>
                                <RadzenButton data-qa="copy" Variant="Variant.Text" Icon="content_copy" Click="() => CopyMonitor(monitor)"/>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenLink Path="@($"monitor/{monitor.Key}")" Attributes="@(new Dictionary<string, object>{{"data-qa", "view"}})">
                            <RadzenText data-qa="monitor-item-title" TextStyle="TextStyle.H2" Text=@($"{monitor.Title}") class="me-1"/>
                        </RadzenLink>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenText data-qa="monitor-item-owner" TextStyle="TextStyle.H6"
                                    Text=@($"{monitor.Owner?.FullName}") class="me-1"/>
                    </RadzenRow>

                </RadzenCard>
            </Template>
        </RadzenDataList>

    </RadzenCard>
</div>

@code {

    private ReactiveValue<IReadOnlyList<MonitorModel>> _monitors = new(ArraySegment<MonitorModel>.Empty);
    private User? _user;
    readonly int _pageSize = 35;
    int _count;
    IEnumerable<MonitorModel> _items;

    void PageChanged(PagerEventArgs args) {
        _count = _monitors.Value!.Count;
        _items = _monitors.Value!.Skip(args.Skip).Take(args.Top);
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        _user = await CurrentUserAccessor.Current;
        Subscribe(ref _monitors, MonitorService.GetMonitors(_user))
            .OnChange(_ => PageChanged(new PagerEventArgs { Top = _pageSize, Skip = 0 }));
    }

    private async Task Add() {
        await MonitorService.Add(_user!, MonitorType.Simple);
    }
    private async Task AddGroup() {
        await MonitorService.Add(_user!, MonitorType.Group);
    }

    private async Task CopyMonitor(MonitorModel monitor) {
        await MonitorService.Copy(_user!, monitor);
    }

    private void SetupMonitor(MonitorModel monitor) {
        string url = UriHelper.BuildRelative("/setupMonitor", $"/{monitor.Key}");
        NavigationManager.NavigateTo(url);
    }


}