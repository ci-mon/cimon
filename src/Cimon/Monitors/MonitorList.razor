@page "/MonitorList"
@using Cimon.Data.Monitors
@using Cimon.Data.Users
@using Cimon.DB.Models
@using MediatR
@using Microsoft.AspNetCore.Http.Extensions
@using User = Cimon.Contracts.User
@inject ICurrentUserAccessor CurrentUserAccessor 
@inject MonitorService MonitorService
@inject NavigationManager NavigationManager
@inject IMediator Mediator; 
@inherits ReactiveComponent

<RadzenCard class="rz-mt-4 main-panel">
    <RadzenDataList PageSize="16" WrapItems="true" AllowPaging="true"
                    Data="@_monitors.Value.Where(GetIsShowMonitor)" TItem="MonitorModel">
        <Template Context="monitor">
            <RadzenCard class="monitor-item">
                <RadzenRow>
                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text=@(monitor.Builds.Count.ToString())/>
                </RadzenRow>
                <div>
                    <RadzenRow>
                        <RadzenText data-qa="monitor-item-title" TextStyle="TextStyle.H2" Text=@($"{monitor.Title}") class="me-1"/>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenText data-qa="monitor-item-owner" TextStyle="TextStyle.H6" 
                                    Text=@($"{monitor.Owner?.FullName}") class="me-1"/>
                    </RadzenRow>
                    <RadzenRow class="item-actions" JustifyContent="JustifyContent.End">
                        <AuthorizeView Policy="EditMonitor" Resource="monitor">
                            <RadzenButton data-qa="remove" Variant="Variant.Text" Icon="remove" Click="() => Remove(monitor)"/>
                            <RadzenButton data-qa="setup" Variant="Variant.Text" Text="Setup" Click="() => SetupMonitor(monitor)"/>
                        </AuthorizeView>
                        <RadzenButton data-qa="view" Variant="Variant.Text" Text="Open" Click="() => ViewMonitor(monitor)"/>
                    </RadzenRow>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>

</RadzenCard>
<RadzenStack class="bottom-panel" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.End">
    <AuthorizeView>
        <RadzenButton aria-label="add-monitor" Click="Add" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-8"/>
    </AuthorizeView>
</RadzenStack>
<style>
    .bottom-panel {
        position: absolute;
        bottom: 0;
        width: 100%;
        padding: 1em;
        pointer-events: none;
    }
    .bottom-panel button {
        pointer-events: all;
    }
    .main-panel {
        height: 100%;
        margin-top: 0px !important;
    }
    .main-panel .rz-paginator {
        justify-content: center;
    }
    .main-panel .rz-datalist-content .rz-paginator-next
     ,.main-panel .rz-datalist-content .rz-paginator-prev{
        margin-right: 0;
        margin-left: 0;
    }
    .main-panel .rz-datalist-content {
        height: calc(100% - 40px);
    }
    .main-panel .rz-datalist-content .rz-g {
        height: 100%;
        display: grid;
        grid-template-columns: auto auto auto auto;
    }
    .monitor-item {
        max-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .item-actions {
        position: relative;
        bottom: 0px;
    }
</style>

@code {

    private ReactiveValue<IReadOnlyList<MonitorModel>> _monitors = new(ArraySegment<MonitorModel>.Empty);
    private User? _user;
    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        Subscribe(ref _monitors, MonitorService.GetMonitors());
        _user = await CurrentUserAccessor.Current;
    }

    private async Task Add() {
        await MonitorService.Add(_user!);
    }

    private void ViewMonitor(MonitorModel monitor) {
        string url = UriHelper.BuildRelative("/monitor", $"/{monitor.Key}");
        NavigationManager.NavigateTo(url);
    }

    private void SetupMonitor(MonitorModel monitor) {
        string url = UriHelper.BuildRelative("/setupMonitor", $"/{monitor.Key}");
        NavigationManager.NavigateTo(url);
    }

    private async Task Remove(MonitorModel monitor) {
        await Mediator.Publish(new MonitorOpenedNotification(_user!, null));
        await MonitorService.Remove(monitor);
    }

    private bool GetIsShowMonitor(MonitorModel m) {
        return !m.Removed && (m.Shared || m.Owner?.Id == _user?.Id || (_user?.Roles.Contains("monitor-editor") ?? false));
    }

}
