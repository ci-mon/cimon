@page "/UsersList"
@using Cimon.Data.Users
@using Cimon.DB.Models
@using Microsoft.EntityFrameworkCore
@using Akka.Hosting
@using Cimon.Data.Common
@using System.Collections.Immutable
@attribute [Authorize(Roles = "admin")]

@inherits DbContextComponent<User>;
@inject UserManager UserManager;
@inject IRequiredActor<UserSupervisorActor> UserSupervisorActor;

<RadzenLayout Style="padding: 1em">
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenStack JustifyContent="JustifyContent.End" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
            <RadzenToggleButton Value="_showOnlineOnly" ValueChanged="OnShowOnlineOnlyChanged" Title="Show online" Icon="public" />
        </RadzenStack>
        <RadzenDataGrid @ref="Grid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PagerPosition="PagerPosition.Top" PageSize="30" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@Items" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="User" Property="Name" Title="Name" Width="180px">
                    <Template Context="user">
                        @user.Name
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="FullName" Title="FullName" Width="180px">
                    <Template Context="user">
                        @user.FullName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="Roles" Title="Roles" Width="180px">
                    <Template Context="user">
                        @string.Join(",", user.Roles.Select(x => x.Name))
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="Teams" Title="Teams" Width="180px">
                    <Template Context="user">
                        @string.Join(",", user.Teams.Select(x => x.Name))
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="LocalLogin" Title="LocalLogin" Width="80px">
                    <Template Context="user">
                        @user.AllowLocalLogin
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="IsDeactivated" Title="IsDeactivated" Width="80px">
                    <Template Context="user">
                        @user.IsDeactivated
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Filterable="false" Title="Is online" Width="80px">
                    <Template Context="user">
                        @if (_usersOnline.Value is { } onlineUsers && onlineUsers.Contains(user.Name)) {
                            <RadzenBadge Text="Online" BadgeStyle="BadgeStyle.Success" IsPill="@true"/>
                        } else {
                            <RadzenBadge Text="Offline" BadgeStyle="BadgeStyle.Warning" IsPill="@true"/>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="user">
                        @if (user.IsDeactivated) {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="person" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Text="Activate" Click="@(args => Activate(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        } else {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="person_off" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Text="Deactivate" Click="@(args => Deactivate(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenLayout>

@code {

    private ReactiveValue<IImmutableSet<string>> _usersOnline;
    private bool _showOnlineOnly;
    protected override IQueryable<User> GetItems() {
        var items = DbContext.Users.OrderBy(x=>x.Id).Include(x => x.Teams).Include(x => x.Roles);
        return _showOnlineOnly && _usersOnline.Value is { } onlineUsers ? items.Where(x => onlineUsers.Contains(x.Name)) : items;
    }

    private async Task Deactivate(User value) {
        await UserManager.Deactivate(value.Name);
    }

    private async Task Activate(User value) {
        await UserManager.Activate(value.Name);
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        var activeUsers = await UserSupervisorActor.ActorRef.Ask(new ActorsApi.GetActiveUserNames());
        Subscribe(ref _usersOnline, activeUsers).OnChange(set => {
            RefreshItems();
        });
    }

    private void OnShowOnlineOnlyChanged(bool value) {
        _showOnlineOnly = value;
        RefreshItems();
        Grid.Reload();
        StateHasChanged();
    }

}
