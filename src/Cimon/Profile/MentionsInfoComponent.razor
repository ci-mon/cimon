@using Cimon.Data.Discussions
@using Cimon.Data.Users
@using System.Reactive.Linq
@using Akka.Hosting
@inherits ReactiveComponent
@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject ICurrentUserAccessor CurrentUserAccessor
@inject IRequiredActor<UserSupervisorActor> UserSupervisorActor;
<RadzenBadge class="mentions-badge"  BadgeStyle="@BadgeStyle" MouseEnter="@(ShowTooltip)">
    <RadzenButton Variant="Variant.Text" Size="ButtonSize.ExtraSmall" Click="OpenMentions" Text="@_mentionsCount.ToString()" 
                  Style="color: var(--rz-white);"/>
</RadzenBadge>
<style>
    .mentions-badge {
        align-self: center;
    }
</style>
@code {
    private ReactiveValue<int> _mentionsCount;
    private BadgeStyle BadgeStyle => _mentionsCount.Value > 0 ? BadgeStyle.Danger : BadgeStyle.Info;
    

    protected override async Task InitializeReactiveValues() {
        var user = await CurrentUserAccessor.Current;
        var mentions = await AppActors.GetMentions(user, UserSupervisorActor);
        Subscribe(ref _mentionsCount, mentions.Select(x => x.Select(m => m.CommentsCount).Sum()));
    }

    void ShowTooltip(ElementReference elementReference) {
        var message = $"You were mentioned {_mentionsCount} times";
        string color = _mentionsCount.Value > 0 ? "--rz-danger" : "--rz-primary";
        TooltipService.Open(elementReference, message, new TooltipOptions {
            Style = $"background-color: var({color}); color: var(--rz-text-contrast-color)",
            Position = TooltipPosition.Left
        });
    }

    private void OpenMentions() {
        NavigationManager.NavigateTo("/mentions");
    }

}
