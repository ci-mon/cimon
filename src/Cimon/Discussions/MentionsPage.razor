@page "/mentions"
@using Cimon.Data.Users
@using Cimon.Data.Monitors
@inherits ReactiveComponent
@inject ICurrentUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject BuildConfigService BuildConfigService 
<PageTitle>Mentions</PageTitle>
<RadzenCard>
    @if (_mentions is null) {
        <RadzenText TextStyle="TextStyle.H2" Text="Loading..." />
    } else if (_mentions.IsEmpty || !_mentions.Value.Any()) {
        <RadzenText TextStyle="TextStyle.H2" Text="All good..." />
    } else {
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start">
            <RadzenText Text="@StatusText" />
            @foreach (var mention in _mentions.Value) {
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="@mention.BuildConfig.Map(x=>x.Key).ValueOr(mention.Mention.BuildConfigId.ToString)" Click="() => GoToDiscussion(mention.Mention.BuildConfigId)"/>
                    <RadzenText>@mention.Mention.CommentsCount times</RadzenText>
                </RadzenStack>
            }
        </RadzenStack>
    }
</RadzenCard>
@code {
    private ReactiveValue<IReadOnlyCollection<MentionInBuildConfig>>? _mentions;
    private string StatusText => $"You was mentioned in {_mentions?.Value?.Count ?? 0} builds";
    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        var user = await UserAccessor.Current;
        _mentions = Subscribe(await BuildConfigService.GetMentionsWithBuildConfig(user));
    }

    private void GoToDiscussion(int discussionId) {
        NavigationManager.NavigateTo($"buildDiscussion/{discussionId}");
    }

}
