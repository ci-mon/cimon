@namespace Cimon.Discussions
@page "/buildDiscussion/{BuildConfigId?}"
@using Cimon.Contracts
@using Cimon.Data.Common
@using Cimon.Data.Discussions
@using Cimon.Data.Users
@inject IJSRuntime JsRuntime;
@inject ICurrentUserAccessor CurrentUserAccessor;
@inherits ReactiveComponent

@if (_state?.HasValue ?? false) {
    <div class="container">
        <RadzenRow JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="10" SizeSM="10" SizeXS="10" SizeXX="9" SizeMD="8" SizeLG="7" SizeXL="6">
                <RadzenCard class="status-item">
                    <RadzenLabel>Discussion state: </RadzenLabel> <RadzenLabel Text="@State.Status.ToString()"></RadzenLabel>
                </RadzenCard>
                @foreach (var comment in State.Comments) {
                    <CommentComponent
                        BuildComment="comment"
                        OnSave="() => OnSave(comment)"
                        OnDelete="() => OnDelete(comment)">
                    </CommentComponent>
                }
                @if (State.Status != BuildDiscussionStatus.Closed) {
                    <RadzenCard class="comment-editor-block">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch">
                            <div style="width: 100%">
                                <QuillEditor Class="comment-editor" @bind-Content="@_newComment.Comment" OnSend="AddComment"/>
                            </div>
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.End">
                                <RadzenButton Click="AddComment" Icon="send" Size="ButtonSize.Large"/>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenColumn>
        </RadzenRow>
    </div>
} else {
    <RadzenText TextStyle="TextStyle.H1" Text="Discussion not found"/>
}
<style>
    .container{
       background-color: var(--rz-base-800);
       height: 100%;
       width: 100%;
       max-width: 100%;
       margin: 0;
       overflow: scroll;
    }
    .container div {
        position: relative;
    }
    .container::before {
        pointer-events: none;
        content: "";
        background-image: url("/img/tile.jpg");
        background-size: cover;
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;
        opacity: 0.40;
        filter: blur(6px);
    }
    .comment-item, .status-item{
        margin-top: 1em;
    }
    .comment-item {
        background-color: transparent;
        box-shadow: none;
    }
    .comment-item:not(.editing) .comment-editor.ql-container {
         border: none;
         height: auto;
    }
    .comment-item .comment-date{
        color: var(--rz-base-700);
    }
    .comment-editor-block {
        margin-top: 1em;
    }
    .comment-editor {
        height: 100px;
        display: block;
    }
    .comment-content {
        background-color: white;
        border-radius: 1em 1em 1em 0;
        padding: 1.5em;
    }
    .highlighted-by-hash .comment-content {
        box-shadow: inset 0 0 5px 3px #0bc3a775, 0 0 5px 4px #0aa38b91;
    }
</style>

@code {

    [Parameter]
    public string BuildConfigId { get; set; }

    private ReactiveValue<BuildDiscussionState>? _state;
    private CommentData _newComment = new();
    private User _user = null!;
    private ActorsApi.DiscussionHandle? _discussionHandle;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        await JsRuntime.InvokeVoidAsync("interactiveAPI.highlightElementByHash");
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _user = await CurrentUserAccessor.Current;
        _discussionHandle = await AppActors.Instance.DiscussionStore.Ask(new ActorsApi.FindDiscussion(int.Parse(BuildConfigId)));
        _state = Subscribe(_discussionHandle.State);
        ClearComment();
        StateHasChanged();
    }

    private void ClearComment() {
        _newComment = new CommentData {
            Author = _user
        };
    }

    private void AddComment() {
        _discussionHandle?.AddComment(_newComment);
        ClearComment();
        StateHasChanged();
    }

    private void OnSave(BuildComment comment) {
        _discussionHandle?.UpdateComment(comment);
    }

    private void OnDelete(BuildComment comment) {
        _discussionHandle?.RemoveComment(comment);
    }

    private BuildDiscussionState State => _state.Value;

}
