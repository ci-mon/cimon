@namespace Cimon.Discussions
@page "/buildDiscussion/{BuildConfigId?}"
@using Cimon.Contracts
@using Cimon.Data.Common
@using Cimon.Data.Discussions
@using Cimon.Data.Users
@using Cimon.Monitors
@using System.Collections.Immutable
@using Akka.Hosting
@inject IJSRuntime JsRuntime;
@inject ICurrentUserAccessor CurrentUserAccessor;
@inherits ReactiveComponent
@inject IRequiredActor<UserSupervisorActor> UserSupervisorActor;
@inject IRequiredActor<DiscussionStoreActor> DiscussionStoreActor;

@if (_state.Value is {} state) {
    <div class="container">
        <RadzenRow JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="10" SizeSM="10" SizeXS="10" SizeXX="9" SizeMD="8" SizeLG="7" SizeXL="6" Style="z-index: 1">
                @if (_builds.HasValue) {
                    @foreach (var build in _builds.Value) {
                        <div class="build-info-in-discussion">
                            <BuildInfoComponent 
                                BuildConfig="@build.BuildConfig" 
                                Info="@build.BuildInfo"
                                ActiveUsers="_activeUsers"/>
                        </div>
                    }
                }
                <RadzenCard class="status-item">
                    <RadzenLabel>Discussion state: </RadzenLabel> <RadzenLabel Text="@state.Status.ToString()"></RadzenLabel>
                </RadzenCard>
                @foreach (var comment in state.Comments) {
                    <CommentComponent
                        BuildComment="comment"
                        OnSave="() => OnSave(comment)"
                        OnDelete="() => OnDelete(comment)">
                    </CommentComponent>
                }
                @if (state.Status != BuildDiscussionStatus.Closed) {
                    <RadzenCard class="comment-editor-block">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch">
                            <div style="width: 100%">
                                <QuillEditor Class="comment-editor" @bind-Content="@_newComment.Comment" OnSend="AddComment"/>
                            </div>
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.End">
                                <RadzenButton Click="AddComment" Icon="send" Size="ButtonSize.Large"/>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenColumn>
        </RadzenRow>
    </div>
} else if (ReactiveValuesInitialized) {
    <RadzenText TextStyle="TextStyle.H1" Text="Discussion not found"/>
}
@code {

    [Parameter]
    public string? BuildConfigId { get; set; }

    protected override bool PreloadData => true;

    private ReactiveValue<BuildDiscussionState> _state;
    private CommentData _newComment = new();
    private User _user = null!;
    private ActorsApi.DiscussionHandle? _discussionHandle;
    private ReactiveValue<IEnumerable<IDiscussionBuildData>> _builds;
    private IObservable<IImmutableSet<string>>? _activeUsers;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        await JsRuntime.InvokeVoidAsync("interactiveAPI.highlightElementByHash");
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        _user = await CurrentUserAccessor.Current;
        _discussionHandle = await DiscussionStoreActor.ActorRef.Ask(new ActorsApi.FindDiscussion(int.Parse(BuildConfigId)));
        _activeUsers = await UserSupervisorActor.ActorRef.Ask(new ActorsApi.GetActiveUserNames());
        Subscribe(ref _state, _discussionHandle.State);
        Subscribe(ref _builds, _discussionHandle.Builds);
        ClearComment();
        StateHasChanged();
    }

    private void ClearComment() {
        _newComment = new CommentData {
            Author = _user
        };
    }

    private void AddComment() {
        _discussionHandle?.AddComment(_newComment);
        ClearComment();
        StateHasChanged();
    }

    private void OnSave(BuildComment comment) {
        _discussionHandle?.UpdateComment(comment);
    }

    private void OnDelete(BuildComment comment) {
        _discussionHandle?.RemoveComment(comment);
    }

}
