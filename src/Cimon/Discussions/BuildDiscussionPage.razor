@namespace Cimon.Discussions
@page "/buildDiscussion/{BuildConfigId?}"
@using Cimon.Contracts
@using Cimon.Data.Common
@using Cimon.Data.Discussions
@using Cimon.Data.Users
@using Cimon.Monitors
@using System.Collections.Immutable
@using Akka.Hosting
@inject IJSRuntime JsRuntime;
@inject ICurrentUserAccessor CurrentUserAccessor;
@inherits ReactiveComponent
@inject IRequiredActor<UserSupervisorActor> UserSupervisorActor;
@inject IRequiredActor<DiscussionStoreActor> DiscussionStoreActor;
@if (_state.Value is { } state) {
    <div class="container">
        <RadzenRow  JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="10" style="z-index: 1">
                <div style="display: block;width: auto">
                    @if (_builds.HasValue) {
                        @foreach (var build in _builds.Value) {
                            <div class="build-info-in-discussion">
                                <BuildInfoComponent
                                    BuildConfig="@build.BuildConfig"
                                    Info="@build.BuildInfo"
                                    ActiveUsers="_activeUsers"/>
                            </div>
                        }
                    }
                    <RadzenCard class="status-item rz-mt-2 rz-p-0">
                        <RadzenButton class="btn-enter-comment-mode" Visible="@(!_commentModeOn)" Variant="Variant.Text" Click="@(() => _commentModeOn = true)">
                            <RadzenTextBox Disabled="true" Value="Write comment here..."></RadzenTextBox>
                        </RadzenButton>
                        @if (state.Status != BuildDiscussionStatus.Closed && _commentModeOn) {
                        <RadzenCard class="comment-editor-block">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch">
                                <div style="width: 100%">
                                    <QuillEditor Class="comment-editor" @bind-Content="@_newComment.Comment" OnSend="AddComment"/>
                                </div>
                                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenButton Style="align-self: flex-start;" Variant="Variant.Text" Click="@(() => _commentModeOn = false)" Icon="close" Size="ButtonSize.Large"/>
                                    <RadzenButton  Style="align-self: flex-end;" Variant="Variant.Text" Click="AddComment" Icon="send" Size="ButtonSize.Large"/>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                        }
                    </RadzenCard>
                    @for (var index = state.Comments.Count - 1; index >= 0; index--) {
                        var comment = state.Comments[index];
                        var last = index == state.Comments.Count - 1;
                        <CommentComponent Collapsed="@(!last)"
                            BuildComment="comment"
                            OnSave="() => OnSave(comment)"
                            OnDelete="() => OnDelete(comment)">
                        </CommentComponent>
                    }
                </div>
            </RadzenColumn>
        </RadzenRow>
    </div>
} else if (ReactiveValuesInitialized) {
    <RadzenText TextStyle="TextStyle.H1" Text="Discussion not found"/>
}

@code {

    [Parameter] public string? BuildConfigId { get; set; }

    protected override bool PreloadData => true;

    private ReactiveValue<BuildDiscussionState> _state;
    private CommentData _newComment = new();
    private User _user = null!;
    private ActorsApi.DiscussionHandle? _discussionHandle;
    private ReactiveValue<IEnumerable<IDiscussionBuildData>> _builds;
    private IObservable<IImmutableSet<string>>? _activeUsers;
    private bool _commentModeOn;
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        await JsRuntime.InvokeVoidAsync("interactiveAPI.highlightElementByHash");
    }

    protected override async Task InitializeReactiveValues() {
        await base.InitializeReactiveValues();
        _user = await CurrentUserAccessor.Current;
        _discussionHandle = await DiscussionStoreActor.ActorRef.Ask(new ActorsApi.FindDiscussion(int.Parse(BuildConfigId)));
        _activeUsers = await UserSupervisorActor.ActorRef.Ask(new ActorsApi.GetActiveUserNames());
        Subscribe(ref _state, _discussionHandle.State);
        Subscribe(ref _builds, _discussionHandle.Builds);
        ClearComment();
        StateHasChanged();
    }

    private void ClearComment() {
        _newComment = new CommentData {
            Author = _user
        };
    }

    private void AddComment() {
        _discussionHandle?.AddComment(_newComment);
        ClearComment();
        _commentModeOn = false;
        StateHasChanged();
    }

    private void OnSave(BuildComment comment) {
        _discussionHandle?.UpdateComment(comment);
    }

    private void OnDelete(BuildComment comment) {
        _discussionHandle?.RemoveComment(comment);
    }

}
