@namespace Cimon.Discussions
@inject IJSRuntime JsRuntime

<div class="@Class" @ref="_editorContainer"></div>

@code {
    private ElementReference _editorContainer;
    private IJSObjectReference? _quillInstance;
    private string? _content;
    private bool _readonly;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Readonly {
        get => _readonly;
        set {
            if (_readonly == value) return;
            _readonly = value;
            _quillInstance?.InvokeVoidAsync("setReadonly", value);
        }
    }

    [Parameter]
    public string? Content {
        get => _content;
        set {
            if (_content == value) return;
            _content = value;
            SetContent(Content).Wait();
        }
    }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    [Parameter]
    public EventCallback OnSend { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _quillInstance = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "quillInterop.initQuill", new object[] { _editorContainer, DotNetObjectReference.Create(this), Readonly });
            await SetContent(Content);
        }
    }

    [JSInvokable]
    public async Task UpdateContent(string content) {
        _content = content;
        await ContentChanged.InvokeAsync(content);
    }

    [JSInvokable]
    public async Task Send() {
        await OnSend.InvokeAsync();
    }

    private async Task SetContent(string? content) {
        if (_quillInstance != null) await _quillInstance.InvokeVoidAsync("setContent", content ?? "");
    }

}
