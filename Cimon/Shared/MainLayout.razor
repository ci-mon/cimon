@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase
@inject ProtectedLocalStorage BrowserStorage

<PageTitle>Cimon</PageTitle>

<RadzenLayout class="@pageClass()" Style="height: 100vh; grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="ToggleFullScreenAsync"/>
            <RadzenLabel Text="Cimon"/>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
            <LoginDisplay/>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Expanded="_sidebarExpanded" Responsive="false">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
            <RadzenPanelMenuItem Text="Monitors" Icon="monitor" Path="monitorList"/>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody Style="padding: unset">
        @Body
    </RadzenBody>
</RadzenLayout>

@code {
    private bool _sidebarExpanded;

    private string pageClass() => _sidebarExpanded ? "fullscreen" : string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var storageResult = await BrowserStorage.GetAsync<bool>("FullscreenModeState");
            if (storageResult.Success && _sidebarExpanded != !storageResult.Value) {
                _sidebarExpanded = !storageResult.Value;
                StateHasChanged();
            }
        }
    }

    private async Task ToggleFullScreenAsync() {
        _sidebarExpanded = !_sidebarExpanded;
        await BrowserStorage.SetAsync("FullscreenModeState", !_sidebarExpanded);
    }

}
