@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.WebUtilities
@using Optional
@inherits Microsoft.AspNetCore.Components.LayoutComponentBase
@inject ProtectedLocalStorage BrowserStorage
@inject NavigationManager NavManager

<PageTitle>Cimon</PageTitle>
<RadzenButton Visible="_sidebarCollapsed" Click="ToggleFullscreenAsync" Icon="fullscreen" ButtonStyle="ButtonStyle.Primary" class="full-screen-toggle full-screen-toggle-float" />
<RadzenLayout class="@pageClass()" Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
    <RadzenHeader>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn>
            </RadzenColumn>
            <RadzenColumn>
                 <RadzenStack class="right-toolbar" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
                    <div class="rz-mr-2 login-info"><LoginDisplay/></div>
                    <RadzenButton Click="ToggleFullscreenAsync" Icon="fullscreen" ButtonStyle="ButtonStyle.Primary" class="full-screen-toggle" />
                    <div class="rz-ml-2"></div>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenSidebar Expanded="!_sidebarCollapsed" Responsive="false">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
            <RadzenPanelMenuItem Text="Monitors" Icon="monitor" Path="monitorList"/>
            @if (_showSignalsDebugPage) {
             <RadzenPanelMenuItem Text="SignalTest" Icon="monitor" Path="SignalTest"/>
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody Style="padding: unset">
        @Body
    </RadzenBody>
</RadzenLayout>
<style>
    .full-screen .rz-sidebar {
        display: none;
    }
    .full-screen .header.rz-header {
        display: none;
    }
    .full-screen-toggle-float {
        position: absolute;
        right: 0.5em;
        top: 0.5em;
        z-index: 10;
        background-color: transparent !important;
    }
    .right-toolbar{
        margin-top: 0.5em;
    }
    .login-info{
        display: flex;
        align-items: center;
    }
</style>
@code {
    private bool _sidebarCollapsed;
    private bool _showSignalsDebugPage;
    
    protected override void OnInitialized() {
        base.OnInitialized();
        #if DEBUG
        _showSignalsDebugPage = true;
        #endif
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("full-screen", out var value) 
                && bool.TryParse(value, out var fullScreen)) {
            _sidebarCollapsed = fullScreen;
        }
    }

    private string pageClass() => _sidebarCollapsed ? "sidebar-expanded full-screen" : string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            (await InitFromStorage("SidebarCollapsed", _sidebarCollapsed)).MatchSome(res => {
                _sidebarCollapsed = res;
                StateHasChanged();
            });
        }
    }

    private async Task<Option<bool>> InitFromStorage(string name, bool field) {
        var result = await BrowserStorage.GetAsync<bool>(name);
        if (result.Success && field != result.Value) {
            return result.Value.Some();
        }
        return Option.None<bool>();
    }

    private async Task ToggleFullscreenAsync() {
        _sidebarCollapsed = !_sidebarCollapsed;
        await BrowserStorage.SetAsync("SidebarCollapsed", _sidebarCollapsed);
    }


}
