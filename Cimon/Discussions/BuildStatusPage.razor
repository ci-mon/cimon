@namespace Cimon.Discussions
@page "/BuildStatus/{buildId?}"
@using System.Reactive.Linq
@inject BuildDiscussionStoreService DiscussionStoreService
@inherits ReactiveComponent

@if (_state != null) {
    <div>@_state.Status</div>
    <RadzenSplitContainer Orientation="Horizontal" Width="100%" Style="height: 600px;">
        <RadzenPane>
            <RadzenPanelMenu>
                @foreach (var comment in _state.Comments)
                {
                    <RadzenPanelMenuItem Text="@comment.Author" Icon="account_circle">
                        <div>
                            <p>@((MarkupString)comment.Content)</p>
                            @if (comment.Mentions.Any())
                            {
                                <p>
                                    <strong>Mentioned Users:</strong>
                                    @string.Join(", ", comment.Mentions)
                                </p>
                            }
                        </div>
                    </RadzenPanelMenuItem>
                }
            </RadzenPanelMenu>
        </RadzenPane>
        <RadzenPane Size="50%">
            <RadzenTemplateForm @ref="_form" TItem="CommentData" Data="@_newComment" Submit="@AddComment">
                <RadzenFieldset>
                    <RadzenLabel for="author">Author</RadzenLabel>
                    <RadzenTextBox Disabled="true" @bind-Value="@_newComment.Author" Name="author" id="author" Style="width: 100%;"/>
                </RadzenFieldset>

                <RadzenFieldset>
                    <RadzenLabel for="comment">Comment</RadzenLabel>
                    <QuillEditor Class="comment-editor" @bind-Content="@_newComment.Comment"/>
                </RadzenFieldset>

                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"/>
            </RadzenTemplateForm>
        </RadzenPane>

    </RadzenSplitContainer>

}
<style>
    .comment-editor {
        height: 100px;
        display: block;
    }
</style>
@code {
    [Parameter]
    public string? BuildId { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private BuildDiscussionService _discussionService;
    private BuildDiscussionState _state;
    private RadzenTemplateForm<CommentData>? _form;
    private CommentData _newComment = new();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        await DiscussionStoreService.OpenDiscussion(BuildId);
        DiscussionStoreService.GetDiscussionService(BuildId).Subscribe(this, () => _discussionService)
            .SelectMany(x => x.State).Subscribe(this, () => _state);
        await ClearComment();
    }

    private async Task ClearComment() {
        var authenticationState = await AuthenticationState;
        _newComment = new CommentData {
            Author = authenticationState.User.Identity.Name ?? "Guest"
        };
    }

    private async Task AddComment() {
        if (_form?.IsValid == true) {
            await _discussionService.AddComment(_newComment);
            await ClearComment();
        }
    }

}