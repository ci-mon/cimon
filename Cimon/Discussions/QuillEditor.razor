@namespace Cimon.Discussions
@inject IJSRuntime JsRuntime

<div class="@Class" @ref="editorContainer"></div>
@code {
    private ElementReference editorContainer;
    private IJSObjectReference quillInstance;
    private string _content;
    private bool _readonly;

    [Parameter] public string Class { get; set; }

    [Parameter]
    public bool Readonly {
        get => _readonly;
        set {
            if (_readonly == value) return;
            _readonly = value;
            quillInstance?.InvokeVoidAsync("setReadonly", value);
        }
    }

    [Parameter]
    public string Content {
        get => _content;
        set {
            if (_content == value) return;
            _content = value;
            SetContent(Content);
        }
    }

    [Parameter] public EventCallback<string> ContentChanged { get; set; }
    [Parameter] public EventCallback OnSend { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            quillInstance = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "quillInterop.initQuill", new object[]{editorContainer, DotNetObjectReference.Create(this), Readonly});
            await SetContent(Content);
        }
       
    }

    [JSInvokable]
    public async Task UpdateContent(string content)
    {
        _content = content;
        await ContentChanged.InvokeAsync(content);
    }
    
    [JSInvokable]
    public async Task Send()
    {
        await OnSend.InvokeAsync();
    }

    private async Task SetContent(string content) {
        await quillInstance.InvokeVoidAsync("setContent", content);
    }
}
