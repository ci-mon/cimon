@namespace Cimon.Discussions
@page "/buildDiscussion/{buildId?}"
@using System.Reactive.Linq
@inject BuildDiscussionStoreService DiscussionStoreService
@inherits ReactiveComponent

@if (_state != null) {
    <div class="container">
    <RadzenRow JustifyContent="JustifyContent.Center">
        <RadzenColumn Size="10" SizeSM="10" SizeXS="10" SizeXX="8" SizeMD="8" SizeLG="6" SizeXL="4">
            <RadzenCard class="status-item">
               <RadzenLabel>Discussion state: </RadzenLabel> <RadzenLabel Text="@_state.Status.ToString()"></RadzenLabel>
            </RadzenCard>
            @foreach (var comment in _state.Comments) {
                <CommentComponent BuildComment="comment" DiscussionService="_discussionService" ></CommentComponent>
            }
            <RadzenCard class="comment-editor-block">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch">
                    <div style="width: 100%">
                        <QuillEditor Class="comment-editor" @bind-Content="@_newComment.Comment" OnSend="AddComment"/>
                    </div>
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.End">
                        <RadzenButton Click="AddComment" Icon="send" Size="ButtonSize.Large"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
    </div>
} else {
    <RadzenText TextStyle="TextStyle.H1" Text="Discussion not found" />
}
<style>
    .container{
       background-color: var(--rz-base-800);
       height: 100%;
       width: 100%;
       max-width: 100%;
       margin: 0;
       overflow: scroll;
    }
    .container div {
        position: relative;
    }
    .container::before {
        content: "";
        background-image: url("/img/tile.jpg");
        background-size: cover;
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;
        opacity: 0.40;
        filter: blur(6px);
    }
    .comment-item, .status-item{
        margin-top: 1em;
    }
    .comment-item {
        background-color: transparent;
        box-shadow: none;
    }
    .comment-item:not(.editing) .comment-editor.ql-container {
         border: none;
         height: auto;
    }
    .comment-item .comment-date{
        color: var(--rz-base-700);
    }
    .comment-editor-block {
        margin-top: 1em;
    }
    .comment-editor {
        height: 100px;
        display: block;
    }
    .comment-content {
        background-color: white;
        border-radius: 1em 1em 1em 0;
        padding: 1.5em;
    }
    .comment-content-icon{
        border: 5px solid white;
        border-top: none;
        border-left: none;
        width: 1em;
        height: 1em;
        position: relative;
        left: -1.5em;
        bottom: -0.5em;
    }
    .comment-content-icon::after {
        content: '';
        background-color: #a2e7ff;
    }
</style>
@code {
    [Parameter]
    public string? BuildId { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private BuildDiscussionService? _discussionService;
    private BuildDiscussionState? _state;
    private CommentData _newComment = new();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DiscussionStoreService.GetDiscussionService(BuildId).Subscribe(this, () => _discussionService)
            .SelectMany(x => x.State).Subscribe(this, () => _state);
        await ClearComment();
    }

    private async Task ClearComment() {
        var authenticationState = await AuthenticationState;
        _newComment = new CommentData {
            Author = authenticationState.User.Identity.Name ?? "Guest"
        };
    }

    private async Task AddComment() {
        await _discussionService.AddComment(_newComment);
        await ClearComment();
        StateHasChanged();
    }

}
