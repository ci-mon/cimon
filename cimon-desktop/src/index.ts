import { app, BrowserWindow, session, ipcMain, Notification  } from 'electron';
import {rendererConfig} from "../webpack.renderer.config";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
import notifier from "node-notifier";
import {SignalRClient} from "./SignalRClient";
import {
  tapAfterEnvironmentToPatchWatching
} from "fork-ts-checker-webpack-plugin/lib/hooks/tap-after-environment-to-patch-watching";

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const options = {
  baseUrl: 'http://localhost:5001',
  get entrypoint() {
    return `${options.baseUrl}/Desktop`;
  }
}

ipcMain.handle('cimon-get-base-url', () => options.baseUrl);
const createWindow = async () => {

  const currentSession = session.defaultSession;//.fromPartition('cimon', {cache: true});
  currentSession.allowNTLMCredentialsForDomains('*');
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    fullscreen: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      session: currentSession,
      allowRunningInsecureContent: true
    },
    show: true
  });
  ipcMain.handle('cimon-app-show-error', async (event, type) => {
    await event.sender.loadURL(`${MAIN_WINDOW_WEBPACK_ENTRY}?warn=${type}`)
  })
  mainWindow.webContents.openDevTools();
  ipcMain.once('cimon-token-ready', async (event, tokenData) => {
    const {userName, token} = tokenData;
    const signalR = new SignalRClient(options.baseUrl, token, userName);
    await mainWindow.loadURL(`${options.baseUrl}/monitor/all`)
    await signalR.start(mainWindow);
  });
  //options.entrypoint
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
